<?xml version="1.0" encoding="UTF-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>
  <configSections>
    <!--
            BotDetect configuration:

            If your project is not going to be using the Simple API,
            the "Simple API: ..." configuration lines bellow can be safely removed.

            If your project is not going to be using the Traditional API,
            the "Traditional API: ..." configuration lines bellow can be safely removed.
        -->
    <!-- Traditional API: Register the BotDetect's Configuration section -->
    <section name="botDetect" requirePermission="false" type="BotDetect.Configuration.BotDetectConfigurationSection, BotDetect" />
  </configSections>
  <system.web>
    <compilation debug="true" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" maxRequestLength="2097152" executionTimeout="300" />
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    <identity impersonate="true" userName="" password="" />
    <authentication mode="Forms">
      <forms name="MyAuth" timeout="10" protection="All" loginUrl="~/Default.aspx" slidingExpiration="true" />
    </authentication>
    <!-- Traditional API: Register a custom SessionIDManager for BotDetect requests -->
    <!--<sessionState mode="InProc" cookieless="false" timeout="10" />-->
    <customErrors mode="On" defaultRedirect="Error.aspx" />
    <httpHandlers>
      <!-- Simple API: Register the HttpHandler used for BotDetect requests -->
      <add verb="GET" path="simple-captcha-endpoint.ashx" type="BotDetect.Web.SimpleCaptchaHandler, BotDetect" />
      <!-- Traditional API: Register the HttpHandler used for BotDetect requests -->
      <add verb="GET" path="BotDetectCaptcha.ashx" type="BotDetect.Web.CaptchaHandler, BotDetect" />
    </httpHandlers>
    <sessionState mode="InProc" cookieless="false" timeout="20" sessionIDManagerType="BotDetect.Web.CustomSessionIdManager, BotDetect" />
    <!-- Traditional API: Ensuring Session State is enabled -->
    <pages enableSessionState="true">
      <controls>
        <add assembly="BotDetect" namespace="BotDetect.Web.UI" tagPrefix="BotDetect" />
      </controls>
    </pages>
    <httpCookies httpOnlyCookies="true" requireSSL="true" domain="online.thomsondigital.com" />
  </system.web>
  <connectionStrings>
    <!--<add name="Sql" connectionString="Server=172.16.23.8;Database=;User ID=;Password=;Trusted_Connection=false;" providerName="System.Data.SqlClient" />-->
	<add name="Sql" connectionString="Server=172.16.23.9;Database=;User ID=;Password=;Trusted_Connection=false;" providerName="System.Data.SqlClient" />
    <!--<add name="ConnectionString" connectionString="Server=172.16.0.61;Database=;User ID=;Password=;Trusted_Connection=false;" providerName="System.Data.SqlClient" />-->
  </connectionStrings>
  <appSettings>
    <add key="UploadFilePath" value="D:\Data\LexisNexis_File" />
    <add key="FTPFilePath" value="D:\Data\Fiches" />
    <add key="strCC" value="hassan.kaudeer@thomsondigital.com" />
    <add key="strTo" value="jitender.r@thomsondigital.com" />
    <add key="strThomsonTo" value="hassan.kaudeer@thomsondigital.com" />
    <add key="strThomsonCC" value="christophe.rampnoux@lexisnexis.fr,stephanie.zmaric@lexisnexis.fr" />
    <add key="Holiday" value="#01/01/#02/01/#01/04/#02/04/#30/04/#01/05/#08/05/#10/05/#11/05/#20/05/#21/05/#14/07/#15/08/#01/11/#02/11/#11/11/#24/12/#25/12/#31/12/#01/05#" />
    <add key="strCancelArticleCC" value="christophe.rampnoux@lexisnexis.fr,veema.m@thomsondigital.com" />
    <add key="ValidationSettings:UnobtrusiveValidationMode" value="None" />
  </appSettings>
  <system.webServer>
    <!--<security>
    <requestFiltering>
      <verbs>
        <add verb="TRACE" allowed="false" />
        <add verb="TRACK" allowed="false" />
      </verbs>
    </requestFiltering>
  </security>-->
    <httpProtocol>
      <customHeaders>
        <!-- SECURITY HEADERS - https://securityheaders.io/? -->
        <!-- Protects against Clickjacking attacks. ref.: http://stackoverflow.com/a/22105445/1233379 
        <add name="X-Frame-Options" value="SAMEORIGIN" />-->
        <!-- Protects against Clickjacking attacks. ref.: https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet 
        <add name="Strict-Transport-Security" value="max-age=31536000; includeSubDomains" />-->
        <!-- Protects against XSS injections. ref.: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/ -->
        <add name="X-XSS-Protection" value="1; mode=block" />
        <!-- Protects against MIME-type confusion attack. ref.: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/ 
        <add name="X-Content-Type-Options" value="nosniff" />-->
        <!-- CSP modern XSS directive-based defence, used since 2014. ref.: http://content-security-policy.com/ 
        <add name="Content-Security-Policy" value="default-src 'none'; font-src 'self'; img-src 'self' data:; script-src 'self' api.jquery.com 'unsafe-inline' 'unsafe-eval' ajax.googleapis.com ajax.aspnetcdn.com; style-src 'self' 'unsafe-inline';connect-src 'self';form-action 'self';" />-->
        <!-- Prevents from leaking referrer data over insecure connections. ref.: https://scotthelme.co.uk/a-new-security-header-referrer-policy/ 
        <add name="Referrer-Policy" value="strict-origin" />
        <add name="permissions-policy" value="accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'" />-->
      </customHeaders>
    </httpProtocol>
    <modules runAllManagedModulesForAllRequests="true" />
    <defaultDocument>
      <files>
        <clear />
        <add value="default.aspx" />
      </files>
    </defaultDocument>
    <validation validateIntegratedModeConfiguration="false" />
    <handlers>
      <!-- Simple API: Register the HttpHandler used for BotDetect requests (IIS 7.0+) -->
      <remove name="SimpleCaptchaEndpoint" />
      <add name="SimpleCaptchaEndpoint" preCondition="integratedMode" verb="GET" path="simple-captcha-endpoint.ashx" type="BotDetect.Web.SimpleCaptchaHandler, BotDetect" />
      <!-- Traditional API: Register the HttpHandler used for BotDetect requests (IIS 7.0+) -->
      <remove name="BotDetectCaptchaHandler" />
      <add name="BotDetectCaptchaHandler" preCondition="integratedMode" verb="GET" path="BotDetectCaptcha.ashx" type="BotDetect.Web.CaptchaHandler, BotDetect" />
    </handlers>
  </system.webServer>
  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior name="ServiceBehaviour">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
        <behavior name="WebBehavior">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
      </serviceBehaviors>
      <endpointBehaviors>
        <behavior name="WebBehavior">
          <webHttp helpEnabled="true" />
        </behavior>
      </endpointBehaviors>
    </behaviors>
    <bindings>
      <webHttpBinding>
        <binding name="Binding">
          <security mode="Transport">
            <transport clientCredentialType="None" />
          </security>
        </binding>
        <binding name="httpbind" />
      </webHttpBinding>
    </bindings>
    <services>
      <service name="LexisNexis.Service1">
        <endpoint address="" behaviorConfiguration="WebBehavior" binding="webHttpBinding" contract="LexisNexis.IService1" />
      </service>
      <service name="LexisNexis.Encyclo">
        <endpoint address="" behaviorConfiguration="WebBehavior" binding="webHttpBinding" contract="LexisNexis.IEncyclo" />
      </service>
      <service name="LexisNexis.Fiche">
        <endpoint address="" behaviorConfiguration="WebBehavior" binding="webHttpBinding" contract="LexisNexis.IFiche" />
      </service>
      <service name="LexisNexis.Journal" behaviorConfiguration="ServiceBehaviour">
        <endpoint address="" binding="webHttpBinding" bindingConfiguration="Binding" contract="LexisNexis.IJournal" behaviorConfiguration="WebBehavior" />
        <endpoint address="" binding="webHttpBinding" bindingConfiguration="httpbind" contract="LexisNexis.IJournal" behaviorConfiguration="WebBehavior" />
        <!--<endpoint address="" behaviorConfiguration="WebBehavior" binding="webHttpBinding" contract="LexisNexis.IJournal" />-->
      </service>
    </services>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />
  </system.serviceModel>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Data.SQLite" publicKeyToken="db937bc2d44ff139" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.0.112.0" newVersion="1.0.112.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>