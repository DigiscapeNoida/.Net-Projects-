using System;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Text;
using System.Runtime.InteropServices;
using System.Xml.Schema;
using Orders;


public partial class OrderCreator : System.Web.UI.Page
{
   Orders.JIDInfo JIDInfoOBJ = new Orders.JIDInfo();
    Orders.XmlOrder XmlOrderOBJ = new Orders.XmlOrder();
    protected void Page_PreLoad(object sender, EventArgs e)
    {
        if (Request.QueryString["Client"] != null)
            XmlOrderOBJ.Client = Request.QueryString["Client"];
        else
            Response.Redirect("Login.aspx");
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        if (IsPostBack == false)
        {
            Inialize();
       }
    }
    protected void   Inialize()
    {


        cmbAccount.Items.Add(XmlOrderOBJ.Client);

        cmbJID.Items.Clear();
        //*****************\\
        JIDInfoOBJ.GetJID(XmlOrderOBJ.Client);
        cmbJID.DataSource = JIDInfoOBJ.JID;
        cmbJID.DataBind();
        //*****************\\

        //*****************\\
        JIDInfoOBJ.GetStage(XmlOrderOBJ.Client);
        cmbStage.DataSource = JIDInfoOBJ.Stage;
        cmbStage.DataBind();
        //*****************\\

        //*****************\\
        for (int i = 0; i < 100; i++)
        {
            cmbFig.Items.Add(i.ToString());
        }
        //*****************\\

        FillDate();

    
        FillCategory();
        //*****************\\

        CalculateActualDueDate();
        //*****************\\

        FillWorkFlow();

        if (cmbAccount.Text.Trim().Equals("THIEME"))
            GetEditorDetails(cmbJID.Text.Trim(), cmbAccount.Text.Trim());
    }

    private void FillDate()
    {

        FillDay(ReciveDay);
        FillMonth(ReciveMonth);
        FillYear(ReciveYear);

        FillDay(ReviseDay);
        FillMonth(ReviseMonth);
        FillYear(ReviseYear);

        FillDay(AcceptedDay);
        FillMonth(AcceptedMonth);
        FillYear(AcceptedYear);
    }
    protected void DisableControls(Control c)
    {
        if (c is WebControl && !(c is Label))
            ((WebControl)c).Enabled = false;
        foreach (Control child in c.Controls)
            DisableControls(child);


    }
    protected void ExpirePageCache()
    {
        Response.Cache.SetCacheability(HttpCacheability.NoCache);
        Response.Cache.SetExpires(DateTime.Now - new TimeSpan(1, 0, 0));
        Response.Cache.SetLastModified(DateTime.Now);
        Response.Cache.SetAllowResponseInBrowserHistory(false);
    }
    protected void ImageButton1_Click(object sender, ImageClickEventArgs e)
    {
        
    }
    
   
    protected void FillWorkFlow()
    {
        cmbMCE.Items.Clear();
        JIDInfoOBJ.GetWorkFlow(XmlOrderOBJ.Client, cmbJID.Text, cmbStage.Text);
        cmbMCE.DataSource = JIDInfoOBJ.WorkFlow;
        cmbMCE.DataBind();
    }
    protected void cmdGenerate_Click(object sender, EventArgs e)
    {
        bool Result = false;
        DateTime DT = DateTime.Today;
  
    
        XmlOrderOBJ.ActutalDueDate  = AddDaysNoWeekends(JIDInfoOBJ.GetTAT(XmlOrderOBJ.Client, cmbJID.Text, cmbStage.Text));
        XmlOrderOBJ.InternalDuedate = XmlOrderOBJ.ActutalDueDate;

        XmlOrderOBJ.AID             = txtAID.Text;


        
        if (cmbCategory.Text.StartsWith("-S") &&  cmbAccount.Text.Equals("IS"))
            XmlOrderOBJ.ArticleCategory = "Article";
        else
            XmlOrderOBJ.ArticleCategory = cmbCategory.Text;

        if (cmbArtType.Text.StartsWith("-S") && cmbAccount.Text.Equals("IS"))
            XmlOrderOBJ.ArticleType     = "FLA";
        else
            XmlOrderOBJ.ArticleType     = cmbArtType.Text;


        XmlOrderOBJ.Client          = cmbAccount.Text;
        XmlOrderOBJ.DOI             = txtDOI.Text;
        XmlOrderOBJ.Figs            = cmbFig.Text;

        

      //  XmlOrderOBJ.Issue           = txtIssue.Text;


        XmlOrderOBJ.JID             = cmbJID.Text;
        XmlOrderOBJ.MSS             = txtPages.Text;

        XmlOrderOBJ.Editor          = txtEDName.Text;
        XmlOrderOBJ.Designation     = txtEDDesign.Text;
        XmlOrderOBJ.Address         = txtEDAddress.Text;
        XmlOrderOBJ.Tel             = txtEDTel.Text;
        XmlOrderOBJ.Fax             = txtEDFax.Text;

        
       // XmlOrderOBJ.CorAuthName     = txtCorAuthName.Text;
        XmlOrderOBJ.CorAuthEmail    = txtCorAuthEmail.Text;
        XmlOrderOBJ.CorMailCC = txtCorCCEmail.Text; 
        XmlOrderOBJ.PDFName         = txtPDFName.Text;

        XmlOrderOBJ.FrstAuthDgree = txtAuDeg.Text;
        XmlOrderOBJ.FrstAuthFName = txtAUFN.Text;
        XmlOrderOBJ.FrstAuthSName = txtAUSN.Text;


        int Year = GetNumeric(ReviseYear.Text);
        int Mnth = GetNumeric(ReviseMonth.Text);
        int Day  = GetNumeric(ReviseDay.Text);
        XmlOrderOBJ.RevisedDate = GetDate(Year, Mnth, Day);

        Year = GetNumeric(ReciveYear.Text);
        Mnth = GetNumeric(ReciveMonth.Text);
        Day = GetNumeric(ReciveDay.Text);
        XmlOrderOBJ.ReceivedDate = GetDate(Year, Mnth, Day);

        Year = GetNumeric(AcceptedYear.Text);
        Mnth = GetNumeric(AcceptedMonth.Text);
        Day = GetNumeric(AcceptedDay.Text);
        XmlOrderOBJ.AcceptedDate = GetDate(Year, Mnth, Day);

        XmlOrderOBJ.Stage                 = cmbStage.Text;
        XmlOrderOBJ.FMSStage              = JIDInfoOBJ.GetFMSStage( cmbAccount.Text ,cmbStage.Text);
        
      //  XmlOrderOBJ.Volume                = txtVol.Text;
        XmlOrderOBJ.WorkFlow              = cmbMCE.Text;



        bool sts = createorderfile();
        if (sts == true)
        {
            lblmessage.Text = "Order Created Successfully!";
        }

        /*
        string XMLFilePath=XmlOrderOBJ.CreateXMLOrder();
        

        if (File.Exists (XMLFilePath))
        {
            string ZipFile = XMLFilePath.Replace(".xml", ".zip");
            if (File.Exists(ZipFile))
            {
                File.Delete(ZipFile);
            }
            flUpload.SaveAs(ZipFile);
            FileInfo zipFl = new FileInfo(ZipFile);


            string FMSPath = string.Empty;
            if (XmlOrderOBJ.Client.Equals("IS"))
                FMSPath = Orders.ConfigDetails.IPIPFMSPath;
            else
                FMSPath = Orders.ConfigDetails.FMSPath;
 
            if (flUpload.PostedFile.ContentLength == zipFl.Length)
            { 
                string FMSXMLFile = FMSPath.TrimEnd(new char[] { '\\' }) + "\\" + Path.GetFileName(XMLFilePath);
                File.Copy(XMLFilePath, FMSXMLFile);    

                string FMSZipFile = FMSPath.TrimEnd(new char[] { '\\' }) + "\\" + Path.GetFileName(ZipFile);
                File.Copy(ZipFile, FMSZipFile);

                XmlOrderOBJ.SetCorAuthorDetails();  // Insert Cor Author Details in Database OPSTest

                ResetInfo();
                Result = true;
            }
        }
        if (Result)
        {
                string alertScript = "<script language=JavaScript>";
                alertScript += "alert('--- Order Created successfully---')</script" + "> ";
                this.RegisterClientScriptBlock("alert", alertScript);
        }
        */
    }

    private bool createorderfile()
    {
        string preremarks = "";
        string prooffile = "";
        MemoryStream memoryStream = new MemoryStream();
        DateTime dt = DateTime.Now;
        DateTime dt1 = DateTime.Now.AddDays(1);

        string year = dt.Year.ToString();

        string month = dt.Month.ToString();
        if (month.Length == 1) month = "0" + month;

        string date = dt.Day.ToString();
        if (date.Length == 1) date = "0" + date;

        string hour = dt.ToString("HH:mm:ss");
        string[] hrf = hour.Split(':');

        string hr = hrf[0];
        if (hr.Length == 1) hr = "0" + hr;

        string min = hrf[1];
        if (min.Length == 1) min = "0" + min;

        string sec = hrf[2];
        if (sec.Length == 1) sec = "0" + sec;

        string datedue = dt1.Day.ToString();
        if (datedue.Length == 1) datedue = "0" + datedue;

        XmlWriterSettings objSetting = new XmlWriterSettings();
        objSetting.Encoding = Encoding.UTF8;// new UTF8Encoding(true);
        objSetting.Indent = true;
        objSetting.NewLineOnAttributes = false;

        // System.Text.StringBuilder sb = new System.Text.StringBuilder();

        using (XmlWriter objWriter = XmlWriter.Create(memoryStream, objSetting))
        {

            //Note the artificial, but useful, indenting
            objWriter.WriteStartDocument();

            objWriter.WriteProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"ptsiiiorder.xsl\"");
            objWriter.WriteDocType("orders", null, "ptsiiiorder144.dtd", null);
            objWriter.WriteStartElement("orders");

            objWriter.WriteStartElement("order");

            objWriter.WriteStartElement("time");
            objWriter.WriteAttributeString("day", date);
            objWriter.WriteAttributeString("month", month);
            objWriter.WriteAttributeString("yr", year);
            objWriter.WriteAttributeString("hr", hr);
            objWriter.WriteAttributeString("min", min);
            objWriter.WriteAttributeString("sec", sec);
            objWriter.WriteEndElement();

            objWriter.WriteElementString("po-number", "T0123456");



            objWriter.WriteStartElement("due-date");

            objWriter.WriteStartElement("time");

            objWriter.WriteAttributeString("day", datedue);
            objWriter.WriteAttributeString("month", month);
            objWriter.WriteAttributeString("yr", year);
            objWriter.WriteAttributeString("hr", hr);
            objWriter.WriteAttributeString("min", min);
            objWriter.WriteAttributeString("sec", sec);
            objWriter.WriteEndElement();
            objWriter.WriteEndElement();



            objWriter.WriteElementString("prod-site", "ESCH - Elsevier India Pvt Ltd.");

            objWriter.WriteElementString("opco", "OCUS - Operating Company Elsevier Inc.");
            string stage = "";
            if (cmbStage.SelectedValue.ToString() == "FRESH")
            {
                stage = "S100";
            }
            objWriter.WriteStartElement("stage");
            objWriter.WriteAttributeString("step", stage);
            objWriter.WriteEndElement();

            objWriter.WriteStartElement("executor");
            objWriter.WriteAttributeString("type", "TYPESETTER");
            objWriter.WriteAttributeString("addressee", "yes");

           
            objWriter.WriteElementString("exec-code", "THOM");
            objWriter.WriteElementString("exec-name", "Thomson Digital");
           

            objWriter.WriteStartElement("aff");
            objWriter.WriteElementString("address", "B/10-12");
            objWriter.WriteElementString("address-contd", "Noida Special Economic Zone");

            objWriter.WriteStartElement("zipcode");
            objWriter.WriteAttributeString("zipcode-pos", "AFTERCTY");
            objWriter.WriteString("201 305");
            objWriter.WriteEndElement();

            objWriter.WriteElementString("cty", "Noida");
            objWriter.WriteElementString("cny", "India");
            objWriter.WriteElementString("tel", "+91-120-256 2499");
            objWriter.WriteElementString("fax", "+91-120-256 2299");

            objWriter.WriteEndElement();
            objWriter.WriteEndElement();
            // second executer
            objWriter.WriteStartElement("executor");
            objWriter.WriteAttributeString("type", "WAREHOUSE");
            objWriter.WriteAttributeString("addressee", "no");

            objWriter.WriteElementString("exec-code", "NOWAR");
            objWriter.WriteElementString("exec-name", "No warehouse");

            objWriter.WriteStartElement("aff");
            objWriter.WriteElementString("organization", "Elsevier");
            objWriter.WriteElementString("cny", "Netherlands");

            
            objWriter.WriteEndElement();
            objWriter.WriteEndElement();
            /////// from file

            objWriter.WriteStartElement("item-info");
            objWriter.WriteElementString("version-no", stage+".1");
            objWriter.WriteElementString("language", "English");
            objWriter.WriteElementString("crossmark", "no");

            objWriter.WriteElementString("jid", cmbJID.Text.Trim());
            objWriter.WriteElementString("aid", txtAID.Text.Trim());
            objWriter.WriteElementString("pii", txtpii.Text);
            objWriter.WriteElementString("doi", txtDOI.Text);
            objWriter.WriteElementString("item-title", txtArticleTitle.Text.Trim());


            
            if (ReciveYear.Text != "-Year-" && ReciveMonth.Text != "-Month-" && ReciveDay.Text != "-Day-")
            {
               
                objWriter.WriteStartElement("received-date");
                objWriter.WriteStartElement("date");
                objWriter.WriteAttributeString("day", ReciveDay.Text);
                objWriter.WriteAttributeString("month", ReciveMonth.Text);
                objWriter.WriteAttributeString("yr", ReciveYear.Text);
                objWriter.WriteEndElement();
                objWriter.WriteEndElement();
            }
            if (ReviseYear.Text != "-Year-" && ReviseMonth.Text != "-Month-" && ReviseDay.Text != "-Day-")
            {
               
                objWriter.WriteStartElement("revised-date");
                objWriter.WriteStartElement("date");
                objWriter.WriteAttributeString("day", ReviseDay.Text);
                objWriter.WriteAttributeString("month", ReviseMonth.Text);
                objWriter.WriteAttributeString("yr", ReviseYear.Text);
                objWriter.WriteEndElement();
                objWriter.WriteEndElement();
            }
            if (AcceptedYear.Text != "-Year-" && AcceptedMonth.Text != "-Month-" && AcceptedDay.Text != "-Day-")
            {
               
                objWriter.WriteStartElement("accept-date");
                objWriter.WriteStartElement("date");
                objWriter.WriteAttributeString("day", AcceptedDay.Text);
                objWriter.WriteAttributeString("month", AcceptedMonth.Text);
                objWriter.WriteAttributeString("yr", AcceptedYear.Text);
                objWriter.WriteEndElement();
                objWriter.WriteEndElement();
            }

            objWriter.WriteElementString("prd-type-as-sent", txtprodtype.Text);//

            objWriter.WriteStartElement("online-version");
            objWriter.WriteAttributeString("type", "print");
            objWriter.WriteEndElement();


            objWriter.WriteElementString("pit", txtPIT.Text);
           
            objWriter.WriteStartElement("copy-edit-content");
            objWriter.WriteAttributeString("required", "no");
            objWriter.WriteEndElement();

            if (txtPages.Text != "")
            {
                objWriter.WriteElementString("no-mns-pages", txtPages.Text);
            }


            objWriter.WriteElementString("no-phys-figs", cmbFig.SelectedValue.ToString());
            objWriter.WriteElementString("no-bw-figs", "0");
            objWriter.WriteElementString("no-web-colour-figs", "0");
            objWriter.WriteElementString("no-colour-figs", "0");
            objWriter.WriteElementString("no-e-components", "0");
          
           
           
            objWriter.WriteElementString("righthand-start", "Y");
            objWriter.WriteElementString("copyright-status", "001");
      
            // authore
            if (txtAUFN.Text != "")
            {
                // first  author
                objWriter.WriteStartElement("first-author");
                if (txtAuDeg.Text != "")
                {
                    objWriter.WriteElementString("degree", txtAuDeg.Text.Trim());
                }
                if (txtAUFN.Text != "")
                {
                    objWriter.WriteElementString("fnm", txtAUFN.Text);
                }
                if (txtAUSN.Text != "")
                {
                    objWriter.WriteElementString("snm", txtAUSN.Text.Trim());
                }
                objWriter.WriteEndElement();
            }
                ///////////

            if (txtCorAuthfName.Text.Trim() != "")
            {
                // second author
                objWriter.WriteStartElement("corr-author");
                if (txtcauthdegree.Text != "")
                {
                    objWriter.WriteElementString("degree", txtcauthdegree.Text);
                }
                if (txtCorAuthfName.Text != "")
                {
                    objWriter.WriteElementString("fnm", txtCorAuthfName.Text);
                }
                if (txtCorAuthsName.Text != "")
                {
                    objWriter.WriteElementString("snm", txtCorAuthsName.Text);
                }

                objWriter.WriteStartElement("aff");
                if (txtcorg.Text != "")
                {
                    objWriter.WriteElementString("organization", txtcorg.Text.Trim());
                }
                if (ixtcins.Text != "")
                {
                    objWriter.WriteElementString("institute", ixtcins.Text);
                }
                if (txtcadd.Text != "")
                {
                    objWriter.WriteElementString("address", txtcadd.Text);
                }

                if (txtczip.Text != "")
                {
                    objWriter.WriteStartElement("zipcode");
                    objWriter.WriteAttributeString("zipcode-pos", "AFTERCTY");
                    objWriter.WriteString(txtczip.Text.Trim());
                    objWriter.WriteEndElement();
                }
                if (txtccty.Text != "")
                {
                    objWriter.WriteElementString("cty", txtccty.Text);
                }
                if (txtccny.Text != "")
                {
                    objWriter.WriteElementString("cny", txtccny.Text);
                }
                if (txtctel.Text != "")
                {
                    objWriter.WriteElementString("tel", txtctel.Text);
                }
                if (txtcfax.Text != "")
                {
                    objWriter.WriteElementString("fax", txtcfax.Text);
                }
                if (txtCorAuthEmail.Text != "")
                {

                    objWriter.WriteElementString("ead", txtCorAuthEmail.Text);
                  
                }
                objWriter.WriteEndElement();
                objWriter.WriteEndElement();
                /////
            }

           
           
            /////////
            objWriter.WriteStartElement("offprint-payment");
            objWriter.WriteAttributeString("payment", "no");
            objWriter.WriteEndElement();
            /////

            objWriter.WriteEndElement();
            ///////
            objWriter.WriteEndElement();
            objWriter.WriteEndDocument();

        }
        string xmlString = Encoding.UTF8.GetString(memoryStream.ToArray());
        xmlString = xmlString.Replace("﻿?<?xml version=\"1.0\" encoding=\"utf-8\"?>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        xmlString = xmlString.Replace("﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>", "");
        xmlString = xmlString.Insert(0, "<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        xmlString = xmlString.Replace(" />", "/>");

       

       

        string xmlstring1 = xmlString;
        string dtdpath = Server.MapPath("~/dtd/ptsiiiorder144.dtd");
        xmlstring1 = xmlstring1.Replace("<?xml-stylesheet type=\"text/xsl\" href=\"ptsiiiorder.xsl\"?>", "");
        xmlstring1 = xmlstring1.Replace("<!DOCTYPE orders SYSTEM \"ptsiiiorder144.dtd\">", "<!DOCTYPE orders SYSTEM \"" + dtdpath + "\">");

        // validate proof
        Global.ValidateDTDError = "";


        XmlReaderSettings settings = new XmlReaderSettings();
        settings.ProhibitDtd = false;
        settings.ValidationType = ValidationType.DTD;
        settings.ValidationFlags = XmlSchemaValidationFlags.ReportValidationWarnings;
        settings.ValidationEventHandler += new ValidationEventHandler(ValidationCallBack1);

        XmlReader validator = XmlReader.Create(new StringReader(xmlstring1), settings);
        while (validator.Read())
        {
        }
        validator.Close();
        if (Global.ValidateDTDError != "")
        {
            lblmessage.Text = Global.ValidateDTDError;
           
            Global.ValidateDTDError = "";
            return false;
        }
     //   string proofpath = Session[SESSIONVAR.strpiipath].ToString();
     
      //  proofpath = proofpath + "\\" + ddlArticle.SelectedItem.Text + "\\_" + ddlArticle.SelectedItem.Text + "-" + year + month + date + "_" + hr + min + sec + "_PROOF.xml";//txtaid.Text

     //   File.WriteAllText(proofpath, xmlString);
            string OrderPath = GetOrderPath();
           Global.DirectoryPath = OrderPath;

           string XMLFilePath = OrderPath + "\\" + XmlOrderOBJ.Client + "_" + XmlOrderOBJ.JID + "_" + XmlOrderOBJ.Stage + "_" + XmlOrderOBJ.AID + "_Order_" + GetNextFileNo() + ".xml";
           File.WriteAllText(XMLFilePath, xmlString);
           bool Result = false;
        if (File.Exists(XMLFilePath))
        {
            string ZipFile = XMLFilePath.Replace(".xml", ".zip");
            if (File.Exists(ZipFile))
            {
                File.Delete(ZipFile);
            }
            flUpload.SaveAs(ZipFile);
            FileInfo zipFl = new FileInfo(ZipFile);


            string FMSPath = string.Empty;
            if (XmlOrderOBJ.Client.Equals("IS"))
                FMSPath = Orders.ConfigDetails.IPIPFMSPath;
            else
                FMSPath = Orders.ConfigDetails.FMSPath;

            if (flUpload.PostedFile.ContentLength == zipFl.Length)
            {
                string FMSXMLFile = FMSPath.TrimEnd(new char[] { '\\' }) + "\\" + Path.GetFileName(XMLFilePath);
                File.Copy(XMLFilePath, FMSXMLFile);

                string FMSZipFile = FMSPath.TrimEnd(new char[] { '\\' }) + "\\" + Path.GetFileName(ZipFile);
                File.Copy(ZipFile, FMSZipFile);

                XmlOrderOBJ.SetCorAuthorDetails();  // Insert Cor Author Details in Database OPSTest

                ResetInfo();
                Result = true;
            }
        }
       
        return true;

    }
    private string GetOrderPath()
    {
        if (ConfigDetails.RootPath != null)
        {
            if (!ConfigDetails.RootPath.Equals(""))
            {
                if (!Directory.Exists(ConfigDetails.RootPath))
                    Directory.CreateDirectory(ConfigDetails.RootPath);
            }
        }

        string OrderPath = ConfigDetails.RootPath.Trim(new char[] { '\\' }) + "\\" + XmlOrderOBJ.Client + "\\" + XmlOrderOBJ.JID + "\\" + XmlOrderOBJ.AID + "\\" + XmlOrderOBJ.Stage;
        if (!Directory.Exists(OrderPath))
            Directory.CreateDirectory(OrderPath);

        return OrderPath;
    }
    private int GetNextFileNo()
    {
        int MaxNo = 0;
        if (Directory.Exists(Global.DirectoryPath))
            MaxNo = Directory.GetFiles(Global.DirectoryPath, "*.xml").Length;

        return MaxNo;
    }
    private static void ValidationCallBack1(object sender, ValidationEventArgs args)
    {
        if (args.Severity == XmlSeverityType.Warning)
            Global.ValidateDTDError = Global.ValidateDTDError + " dtd not found" + args.Message;


        else
            Global.ValidateDTDError = Global.ValidateDTDError + args.Message;
    }

    private void ResetInfo()
    {
        txtDOI.Text = "";
     //   txtVol.Text = "";
      //  txtIssue.Text = "";
        cmbFig.Text = "0";
        txtAID.Text = "";
        txtPages.Text = "";
        
        ReciveDay.Text= "-Day-";
        ReciveMonth.Text="-Month-";
        ReciveYear.Text="-Year-";

        AcceptedDay.Text = "-Day-";
        AcceptedMonth.Text = "-Month-";
        AcceptedYear.Text = "-Year-";

        ReviseDay.Text    = "-Day-";
        ReviseMonth.Text  = "-Month-";
        ReviseYear.Text   = "-Year-";

        cmbCategory.Text  = "-Select-";
        cmbArtType.Text   = "-Select-";

        txtArticleTitle.Text = "";
        txtCorAuDeg.Text = "";
       // txtCorAuthName.Text = "";
        txtCorAuthEmail.Text="";
        txtPDFName.Text = "";
        txtAUFN.Text        = "";
        txtAUSN.Text     = "";
        txtAuDeg.Text = "";
        txtCorCCEmail.Text = "";
        

        
    }
    private DateTime GetDate(int Year, int Mnth,int Day)
    {
        DateTime DT= new DateTime ();
        if (Year > 0 && Mnth > 0 && Day > 0)
             DT = new DateTime(Year, Mnth, Day);

        return DT;
    }
    private int GetNumeric(string str)
    { 
        int Val ;
        Int32.TryParse(str, out Val);
        return Val;
    }
    protected void GetEditorDetails(string sJID, string sCust)
    {
        string StrSQL = "";
        string connString = null;
        if (Session["Account"] != null)
        {
                switch(XmlOrderOBJ.Client)
                {
                    case "JW-JOURNALS":
                        {
                            connString =ConfigurationManager.ConnectionStrings["AEPSConnectionString"].ConnectionString;
                            StrSQL = "Select Jname, Peditor, Designation, Pe_Email, Phone, Fax, Address from " + sCust + "_Journal1 where Jid='" + sJID + "'";
                            break;
                        }
                    case "THIEME":
                        {
                            connString = ConfigurationManager.ConnectionStrings["OPSConnectionString"].ConnectionString;
                            StrSQL = "select jname, peditor, designation, pe_email, phone, fax, address from opsdetails where jid='" + sJID + "'"; 
                            break;
                        }
                 }
        }
        if (!string.IsNullOrEmpty(connString))
        {
            SqlConnection AEPSCon = new SqlConnection(connString);

            AEPSCon.Open();
            SqlCommand AEPSCom = new SqlCommand(StrSQL, AEPSCon);
            try
            {
                SqlDataReader AEPSDr = AEPSCom.ExecuteReader();

                if (AEPSDr.HasRows == true)
                {
                    while (AEPSDr.Read() == true)
                    {
                        txtEDName.Text = AEPSDr[1].ToString();
                        txtEDDesign.Text = AEPSDr["Designation"].ToString();
                        txtEDMail.Text = AEPSDr["Pe_Email"].ToString();
                        txtEDTel.Text = AEPSDr["Phone"].ToString();
                        txtEDFax.Text = AEPSDr["Fax"].ToString();
                        txtEDAddress.Text = AEPSDr["Address"].ToString();
                        LblJTitle.Text = AEPSDr[0].ToString();

                        XmlOrderOBJ.JTitle = LblJTitle.Text;
                    }
                }
                AEPSDr.Close();
            }
            catch (Exception ex)
            {
                string alertScript = "<script language=JavaScript>";
                alertScript += "alert(\"---error in GetDetails" + ex.Message.Replace("'",":") + "---\")";
                alertScript += "</script" + "> ";
                this.RegisterClientScriptBlock("alert", alertScript);
            }
            finally
            {
                if (AEPSCon != null)
                {
                    AEPSCon.Close();
                }
            }
        }

    }
    protected void cmbJID_SelectedIndexChanged(object sender, EventArgs e)
    {
        FillWorkFlow();
        ClearEproofingDetails();
        GetEditorDetails(cmbJID.Text.Trim(), cmbAccount.Text.Trim());
        CalculateActualDueDate();
        FillCategory();
    }
    protected void FillCategory()
    {
        try
        {
            cmbCategory.Items.Clear();
            cmbArtType.Items.Clear();

            cmbCategory.Items.Add("-Select-");
            cmbArtType.Items.Add("-Select-");

            if (XmlOrderOBJ.Client.Equals("THIEME"))
            {
                cmbCategory.Items.Add("CASE REPORT");
                cmbCategory.Items.Add("CASE STUDY");
                cmbCategory.Items.Add("CLINICAL LETTER");
                cmbCategory.Items.Add("DIAGNOSTIC PROBLEMS IN HEPATOLOGY");
                cmbCategory.Items.Add("EDITORIAL");
                cmbCategory.Items.Add("ERRATA");
                cmbCategory.Items.Add("ERRATUM");
                cmbCategory.Items.Add("FOREWORD");
                cmbCategory.Items.Add("HOW I DO IT");
                cmbCategory.Items.Add("IN MEMORIAM");
                cmbCategory.Items.Add("INTRODUCTION");
                cmbCategory.Items.Add("LETTER TO THE EDITOR");
                cmbCategory.Items.Add("MINI-REVIEW");
                cmbCategory.Items.Add("MORBIDITY AND MORTALITY CASE");
                cmbCategory.Items.Add("ORIGINAL ARTICLE");
                cmbCategory.Items.Add("PREFACE");
                cmbCategory.Items.Add("REVIEW ARTICLE");
                cmbCategory.Items.Add("SHORT COMMUNICATION");
                cmbCategory.Items.Add("SPECIAL FOCUS SECTION");


                cmbArtType.Items.Add("scientific");
                cmbArtType.Items.Add("magazine");
                cmbArtType.Items.Add("erratum");
                cmbArtType.Items.Add("evaluation");
                cmbArtType.Items.Add("congress-abstract");
                return;
            }
            else
            {
                string artTypeFile = Server.MapPath("") +"\\" + XmlOrderOBJ.Client + "_Arttype.ini";

                if (File.Exists(artTypeFile))
                {
                    string[] Lines = File.ReadAllLines(artTypeFile,Encoding.Default);
                    cmbCategory.DataSource = Lines;
                    cmbCategory.DataBind();

                }
                
                cmbArtType.Items.Add("LIT");
                cmbArtType.Items.Add("BRV");
                cmbArtType.Items.Add("DIS");
                cmbArtType.Items.Add("EDI");
                cmbArtType.Items.Add("EXM");
                cmbArtType.Items.Add("FLA");
                cmbArtType.Items.Add("NWS");
                cmbArtType.Items.Add("PRP");
                cmbArtType.Items.Add("SCO");
                return;
            }

        }
        catch (Exception ex)
        {
            string alertScript = "<script language=JavaScript>";
            alertScript += "alert('---" + ex.Message.Replace("'",":") + "---')";
            alertScript += "</script" + "> ";
            this.RegisterClientScriptBlock("alert", alertScript);
        }
    }
    protected void ClearEproofingDetails()
    {
        txtTo.Text = "";
        txtCC.Text = "";
        if (cmbAccount.Text == "JWUSA")
        {
            cmbCTA.Enabled = false;
            cmbCID.Enabled = false;
            cmbOFFPrint.Enabled = false;
        }
        cmbCTA.Text = "";
        cmbCID.Text = "";
        cmbOFFPrint.Text = "";
        txtAdditionalText.Text = "";
        txtRemarks.Text = "";
        lblError.Text = "";
        txtAuAdd.Text = "";
        txtAuCity.Text = "";
        txtAuCny.Text = "";
        txtAuDeg.Text = "";
        txtAuDept.Text = "";
        txtAuEAD.Text = "";
        txtAuFax.Text = "";
        txtAUFN.Text = "";
        txtAuInstitute.Text = "";
        txtAUSN.Text = "";
        txtAuTel.Text = "";
        txtAuzip.Text = "";
        txtCC.Text = "";
        txtCorAuDeg.Text = "";
        txtCorAuFN.Text = "";
        txtCorAuSN.Text = "";
        if((Session["Account"].Equals("JW-JOURNALS")))
        txtAID.Text = "";
      //  txtVol.Text = "";
       // txtIssue.Text = "";
        txtDueDate.Text = "";
        txtPages.Text = "";
        cmbFig.Text = "0";

        txtDueDate.Text = "";
        txtActualDate.Text = "";
        txtRemarks.Text = "";

    }
    public DateTime AddDaysNoWeekends(int Days)
    {
        int DayIcr = 0;
        DateTime dt = DateTime.Today;
        if (Days == 0)
        {
            return dt;
        }
        try
        {
            //dt=dt.AddDays(-1); //////////////////// To exclude current date
            while (true)
            {
                dt = dt.AddDays(1);
                if (dt.DayOfWeek == DayOfWeek.Saturday
                    || dt.DayOfWeek == DayOfWeek.Sunday
                    || dt.ToShortDateString() == "1/26/2012"   //Republic Day
                    || dt.ToShortDateString() == "3/9/2012"    //Annual Day
                    || dt.ToShortDateString() == "3/11/2009"   //Holi
                    || dt.ToShortDateString() == "8/5/2009"    //Rakshabandhan
                    || dt.ToShortDateString() == "8/15/2012"   //Independence Day
                    || dt.ToShortDateString() == "10/6/2011"   //Dussehra
                    || dt.ToShortDateString() == "10/2/2011"   //Mahatma Gandhi's Birthday
                    || dt.ToShortDateString() == "10/26/2011"  //Diwali
                    || dt.ToShortDateString() == "11/10/2011"  //Guru Nanak’s Birthday
                    || dt.ToShortDateString() == "12/25/2011"  //Christmas Day
                    || dt.ToShortDateString() == "12/31/2011") //Christmas Day
                {
                }
                else
                    DayIcr++;

                if (DayIcr == Days) break;
            }
        }
        catch (Exception Ex)
        {
            StringBuilder Str = new StringBuilder();
            Str.AppendLine("Days :"         + Days);
            Str.AppendLine("Message :"      + Ex.Message);
            Str.AppendLine("DateTime.Today.ToLongDateString() :" + DateTime.Today.ToLongDateString());
            File.WriteAllText(GetLogPath(), Str.ToString());
        }
        return dt;
    }
    private string GetLogPath()
    {
        string AppPath=Server.MapPath("");
        //////////////************Start Create log file path 
        StringBuilder LogFilePath = new StringBuilder("");
        string LogDirPath = "";
        LogDirPath = AppPath + @"\LogFile\" + DateTime.Now.AddDays(-7).ToShortDateString().Replace("/", "-");

        if (Directory.Exists(LogDirPath))
        {
            try
            {
                Directory.Delete(LogDirPath, true);
            }
            catch { }
        }

        LogDirPath = AppPath + @"\LogFile\" + DateTime.Now.ToShortDateString().Replace("/", "-");
        if (!Directory.Exists(LogDirPath))
        {
            Directory.CreateDirectory(LogDirPath);
        }

        LogFilePath = new StringBuilder(String.Format(DateTime.Now.ToString(), "{0:dd/MM/yyyy}") + ".log");
        LogFilePath.Replace('/', '-');
        LogFilePath.Replace(':', '_').Replace(" ", "_");
        LogFilePath = new StringBuilder(LogDirPath + @"\" + LogFilePath);

        //////////////************End Create log file path 
        return LogFilePath.ToString();
    }
    protected void CalculateActualDueDate()
    {
        //1. First get the TAT
        //2. Pass the TAT to method 'AddDaysNoWeekends' to calculate due date; 

        txtDueDate.Text =AddDaysNoWeekends(JIDInfoOBJ.GetTAT(XmlOrderOBJ.Client, cmbJID.Text, cmbStage.Text)).ToString("dd/MM/yyyy");
        txtActualDate.Text = txtDueDate.Text;
    }
    protected void Calendar1_VisibleMonthChanged(object sender, MonthChangedEventArgs e)
    {
       // ClientScript.RegisterHiddenField(DateControl, Request.Form[DateControl]);

    }
    protected void cmbMCE_SelectedIndexChanged(object sender, EventArgs e)
    {
        cmbMCE.ToolTip = cmbMCE.SelectedIndex.ToString();
        cmdGenerate.Focus();
    }
    protected void RecvDateChanged(object sender, EventArgs e)
    {

    }
    protected void txtActualDate_TextChanged(object sender, EventArgs e)
    {

    }
    protected void cmbStage_SelectedIndexChanged(object sender, EventArgs e)
    {
        FillWorkFlow();
        CalculateActualDueDate();
        if (cmbStage.Text.Equals("Fresh",StringComparison.OrdinalIgnoreCase) ==  false)
            txtAID.AutoPostBack = true;
        else
            txtAID.AutoPostBack = false;
    }
    protected void cmbSupMat_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void BtnAddFigure_Click(object sender, ImageClickEventArgs e)
    {


    }
    internal  static bool IsNumeric(object ObjectToTest)
    {
        if (ObjectToTest == null)
        {
            return false;

        }
        else
        {
            double OutValue;
            return double.TryParse(ObjectToTest.ToString().Trim(),
                System.Globalization.NumberStyles.Any,

                System.Globalization.CultureInfo.CurrentCulture,

                out OutValue);
        }
    }
    protected   string getPIT(string artType)
    {
        switch (artType)
        {
            case "Abstract":
                {
                    return "ABS";
                    break;
                }
            case "Article":
                {
                    return "FLA";
                    break;
                }
            case "Addendum":
                {
                    return "ADD";
                    break;
                }
            case "Advertisement":
                {
                    return "ADV";
                    break;
                }
            case "Announcements":
                {
                    return "ANN";
                    break;
                }
            case "Book Review":
                {
                    return "BRV";
                    break;
                }
            case "Calendar":
                {
                    return "CAL";
                    break;
                }
            case "About a conference":
                {
                    return "CNF";
                    break;
                }
            case "Contents list":
                {
                    return "CON";
                    break;
                }
            case "Correspondence":
                {
                    return "COR";
                    break;
                }
            case "Letter to the editor":
                {
                    return "COR";
                    break;
                }
            case "Reply to the letter":
                {
                    return "COR";
                    break;
                }
            case "Discussion":
                {
                    return "DIS";
                    break;
                }
            case "Editorial":
                {
                    return "EDI";
                    break;
                }
            case "Erratum":
                {
                    return "ERR";
                    break;
                }
            case "Examination":
                {
                    return "EXM";
                    break;
                }
            case "Full-length article":
                {
                    return "FLA";
                    break;
                }
            case "Index":
                {
                    return "IND";
                    break;
                }
            case "Literature":
                {
                    return "LIT";
                    break;
                }
            case "Miscellaneous":
                {
                    return "MIS";
                    break;
                }
            case "News":
                {
                    return "NWS";
                    break;
                }
            case "Personal report":
                {
                    return "PRP";
                    break;
                }
            case "Product review":
                {
                    return "PRV";
                    break;
                }
            case "Publisher’s note":
                {
                    return "PUB";
                    break;
                }
            case "Request for assistance":
                {
                    return "REQ";
                    break;
                }
            case "Review Article":
                {
                    return "REV";
                    break;
                }
            case "Short Communication":
                {
                    return "SCO";
                    break;
                }
            case "Short Review":
                {
                    return "SSU";
                    break;
                }
            case "Minireview":
                {
                    return "SSU";
                    break;
                }
            default:
                {
                    return "NA";
                    break;
                }
        }
    }
    protected void cmbAccount_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void AcceptedDay_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void CmdXmlGenerate_Click(object sender, EventArgs e)
    {

    }

    protected void txtAID_TextChanged(object sender, EventArgs e)
    {
        if (!cmbStage.SelectedItem.Text.Equals("FRESH") || true)
        {
            XmlOrderOBJ.JID = cmbJID.Text;
            XmlOrderOBJ.AID = txtAID.Text;
            XmlOrderOBJ.Stage = cmbStage.SelectedItem.Text;

            XmlOrderOBJ.Stage = "Fresh";

            //XmlOrderOBJ.Stage = cmbStage.Items[cmbStage.SelectedIndex - 1].Text;

            if (XmlOrderOBJ.RevisedXMLOrder())
            {
                txtDOI.Text   = XmlOrderOBJ.DOI;
               // txtVol.Text   = XmlOrderOBJ.Volume;
               // txtIssue.Text = XmlOrderOBJ.Issue;
                cmbFig.Text   = XmlOrderOBJ.Figs;
                txtPages.Text = XmlOrderOBJ.MSS;

               // txtCorAuthName.Text = XmlOrderOBJ.CorAuthName;
                txtCorAuthEmail.Text = XmlOrderOBJ.CorAuthEmail;

                txtAUFN.Text = XmlOrderOBJ.FrstAuthFName;
                txtAUSN.Text = XmlOrderOBJ.FrstAuthSName;
                txtAuDeg.Text = XmlOrderOBJ.FrstAuthDgree;

                txtArticleTitle.Text = XmlOrderOBJ.ArtTitle;

                if (cmbCategory.Items.Contains(new  ListItem( XmlOrderOBJ.ArticleCategory)))
                    cmbCategory.Text = XmlOrderOBJ.ArticleCategory;

                if (cmbArtType.Items.Contains(new ListItem(XmlOrderOBJ.ArticleType)))
                    cmbArtType.Text  = XmlOrderOBJ.ArticleType;
            }
        }
    }

    private void FillYear(DropDownList DDL)
    {
        DDL.Items.Clear();
        DDL.Items.Add("-Year-");
        DDL.Items.Add(DateTime.Now.Year.ToString());
        DDL.Items.Add((DateTime.Now.Year - 1).ToString());
        DDL.Items.Add((DateTime.Now.Year - 2).ToString());
        DDL.Items.Add((DateTime.Now.Year - 3).ToString());
        DDL.Items.Add((DateTime.Now.Year - 4).ToString());
        DDL.Items.Add("");

    }

    private void FillDay(DropDownList DDL)
    {
        DDL.Items.Clear();
        DDL.Items.Add("-Day-");
        for (int i = 1; i < 32; i++)
        {
            DDL.Items.Add(i.ToString().PadLeft(2, '0'));
        }
        DDL.Items.Add("");
    }

    private void FillMonth(DropDownList DDL)
    {
        DDL.Items.Clear();
        DDL.Items.Add("-Month-");
        for (int i = 1; i < 13; i++)
        {
            DDL.Items.Add(i.ToString().PadLeft(2, '0'));
        }
        DDL.Items.Add("");
    }
}



